{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport OpenedImage from './openedImage';\nimport lupe from './icons/loupe.png';\nimport cross from \"./icons/letter-x.png\";\nimport arrow from './icons/arrow.png';\nconst tomTomApiKey = \"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\";\nconst APIAccessKey = \"6PMB_sssC924TiZ3jPaY4Iwo4KZ0E6d6xZ0dgSbK4_g\"; // export default class SecondPage extends React.Component{\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         showParticularPic: false,\n//         images: [],\n//         leftImages: [],\n//         midImages: [],\n//         rightImages: [],\n//         query: props.mainInput.charAt(0).toUpperCase() + props.mainInput.slice(1),\n//         picOrientation: \"\",\n//         imgId: \"\",\n//         smallImg: \"\",\n//         rawImg: \"\",\n//         name: \"\",\n//         username: \"\",\n//         location: \"\",\n//         profileImg: \"\",\n//         scrollnum: 1,\n//         imgsFromScroll: [],\n//         resizeImages: [],\n//         tags: []\n//       }\n//       this.handleChange = this.handleChange.bind(this);\n//       this.handleSubmit = this.handleSubmit.bind(this);\n//       this.clearInput = this.clearInput.bind(this);\n//       this.openImage = this.openImage.bind(this);\n//       this.setPicData = this.setPicData.bind(this);\n//       this.fetchAPI = this.fetchAPI.bind(this);\n//       this.scrollUpdate = this.scrollUpdate.bind(this);\n//       this.preparePicToOpen = this.preparePicToOpen.bind(this);\n//       this.showOnImageInfo = this.showOnImageInfo.bind(this);\n//       this.hideOnPicImageInfo = this.hideOnPicImageInfo.bind(this);\n//       this.handleArrow = this.handleArrow.bind(this);\n//       this.handleTag = this.handleTag.bind(this);\n//       this.scrollRigth = this.scrollRigth.bind(this);\n//       this.scrollLeft = this.scrollLeft.bind(this);\n//     }\n//     fetchAPI(page){\n//       fetch(\"https://api.unsplash.com/search/photos/?\"\n//       + \"&client_id=\" + APIAccessKey\n//       + \"&query=\" + this.props.mainInput\n//       + \"&per_page=30\"\n//       + \"&page=\" + page\n//       )\n//       .then(response => response.json())\n//       .then((data, fetchedUrls) => fetchedUrls = data.results.map(elem => [elem.urls.small, elem.urls.regular, elem.user.name,\n//       elem.user.username, elem.user.location, elem.user.profile_image.medium, elem.id, elem.alt_description, elem.tags]))\n//       .then(data => this.setState({images: data.length > 0 ? data : \"empty\"}))\n//       .then(data => this.setState({leftImages: this.state.images === \"empty\" ? this.state.leftImages\n//        : this.state.leftImages.concat(this.state.images.filter((function(_, i){return i % 3 === 0})))}))\n//       .then(data => this.setState({midImages: this.state.images === \"empty\" ? this.state.midImages \n//       :this.state.midImages.concat(this.state.images.slice(2).filter((function(_, i){return i % 3 === 0})))}))\n//       .then(data => this.setState({rightImages: this.state.images === \"empty\" ? this.state.rightImages \n//       :this.state.rightImages.concat(this.state.images.slice(1).filter((function(_, i){return i % 3 === 0})))}))\n//       .then(data => this.setState({resizeImages: this.state.images === \"empty\" ? this.state.resizeImages \n//       :this.state.resizeImages.concat(this.state.images)}))\n//       .then(gettags => gettags = this.state.images.map(elem => elem[8].length > 1 ? elem[8][1] : null).filter(elem => elem !== null)\n//       .map(elem => elem.title).filter(e => e !== this.props.mainInput).filter(e => e.length <= 16))\n//       .then(data => this.setState({tags: [...new Set(data)]}))\n//       .catch(err => console.log(err))\n//       // to hide no hints alert and tags\n//       this.clearInput()\n//       this.setState({tags: []})\n//     }\n//     scrollUpdate(){\n//       if(this.state.showParticularPic === true || this.state.images === \"empty\"){\n//         return;\n//       }\n//       const lastDiv = document.querySelector(\".secondPage__imagesContainer\")\n//       if(lastDiv.getBoundingClientRect().bottom -1 < window.innerHeight){\n//         this.fetchAPI(this.state.scrollnum + 1);\n//         this.setState({\n//           scrollnum: this.state.scrollnum + 1\n//         })\n//       }\n//     }\n//     showOnImageInfo(event){\n//       this.setPicData(event)\n//       const id = event.target.id\n//       const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\n//       const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\n//       userInfoDiv.style[\"display\"] = \"flex\";\n//       resizeUserInfoDiv.style[\"display\"] = \"flex\";\n//     }\n//     hideOnPicImageInfo(event){\n//       const id = event.target.id\n//       const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\n//       const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\n//       userInfoDiv.style[\"display\"] = \"none\";\n//       resizeUserInfoDiv.style[\"display\"] = \"none\";\n//     }\n//     componentDidMount(){\n//       this.fetchAPI(1)\n//       // scroll function\n//       window.addEventListener('scroll', this.scrollUpdate)\n//       // fetch on hints list click\n//       const inp = document.getElementById(\"secondPage__form__search\")\n//       let eventSource = null;\n//       let value = '';\n//       inp.addEventListener('keydown', (e) => {\n//         eventSource = e.key ? 'input' : 'list';\n//       });\n//       inp.addEventListener('input', (e) => {\n//         value = e.target.value;\n//         if (eventSource === 'list') {\n//           this.setState({\n//             images: [],\n//             leftImages: [],\n//             midImages: [],\n//             rightImages: [],\n//             resizeImages: []\n//           })\n//           this.props.setMainInput(value)\n//           this.setState({query: value})\n//           this.fetchAPI(1)\n//         }\n//       });\n//     }\n//     async handleChange(event){\n//       await this.props.setMainInput(event.target.value.toLowerCase())\n//       if(event.target.value.length > 2){\n//         this.props.fetchAPIHints()        \n//       } else {\n//         this.props.setHints([])\n//       }\n//     }\n//     handleSubmit(event){\n//       event.preventDefault();\n//       this.setState({\n//         images: [],\n//         leftImages: [],\n//         midImages: [],\n//         rightImages: [],\n//         resizeImages: [],\n//       })\n//       this.fetchAPI(1)\n//       this.setState({\n//         query: this.props.mainInput.charAt(0).toUpperCase() + this.props.mainInput.slice(1)\n//       })\n//     }\n//     clearInput(){ \n//       const inp = document.querySelector(\".secondPage__form__search\")\n//       if(inp.value === \"\"){\n//         return;\n//       }\n//       inp.value = \"\"\n//       this.props.setHints([])\n//     }\n//     openImage(event){\n//       this.setState({\n//         showParticularPic: !this.state.showParticularPic\n//       })\n//     }\n//     setPicData(event){\n//       const pic = []\n//       const id = event.target.id\n//       const picContainer = event.target.className\n//       if(picContainer === \"leftImg\"){\n//         this.state.leftImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\n//       } \n//       else if (picContainer === \"midImg\"){\n//         this.state.midImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\n//       }\n//       else if (picContainer === \"rightImg\"){\n//         this.state.rightImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\n//       }\n//       else if (picContainer === \"resizeImg\"){\n//         this.state.resizeImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\n//       }\n//       this.setState({\n//         imgId: pic[0][6],\n//         rawImg: pic[0][1],\n//         name: pic[0][2],\n//         username: pic[0][3],\n//         location: pic[0][4],\n//         profileImg: pic[0][5]\n//       })\n//     }\n//     preparePicToOpen(event){\n//       this.setPicData(event)\n//       const picWidth = event.target.width\n//       const picHeight = event.target.height\n//       if(picWidth >= picHeight){\n//         this.setState({\n//           picOrientation: \"horizontal\"\n//         }) \n//       }else{\n//         this.setState({\n//           picOrientation: \"vertical\"\n//         }) \n//       }\n//       this.openImage()\n//     }\n//     handleArrow(){\n//       this.props.changePage()\n//     }\n//     async handleTag(event){\n//       const tag = event.target.id\n//       await this.props.setMainInput(tag)\n//       this.setState({query: tag.charAt(0).toUpperCase() + tag.slice(1) })\n//       this.setState({\n//         images: [],\n//         leftImages: [],\n//         midImages: [],\n//         rightImages: [],\n//         resizeImages: []\n//       })\n//       this.fetchAPI(1);\n//     }\n//     scrollRigth(){\n//       const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\n//       innerTagsDiv.scrollBy(350, 0);\n//       const lA = document.getElementById(\"leftArrowHolder\")\n//       lA.style[\"visibility\"] = \"visible\";\n//       const tagHolderslist = document.querySelectorAll(\".tagHolder\")\n//       const rA = document.getElementById(\"rightArrowHolder\")\n//       if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right < rA.getBoundingClientRect().right){\n//         rA.style[\"visibility\"] = \"hidden\";\n//       }\n//     }\n//     async scrollLeft(){\n//       const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\n//       innerTagsDiv.scrollBy(-350, 0);\n//       const rA = document.getElementById(\"rightArrowHolder\")\n//       rA.style[\"visibility\"] = \"visible\";\n//       const tagHolderslist = document.querySelectorAll(\".tagHolder\")\n//       const lA = document.getElementById(\"leftArrowHolder\")\n//       if(tagHolderslist[0].getBoundingClientRect().left > lA.getBoundingClientRect().left){\n//         lA.style[\"visibility\"] = \"hidden\";\n//         }\n//     }\n//     componentDidUpdate(){\n//       if(this.state.tags.length > 1){\n//         const rA = document.getElementById(\"rightArrowHolder\")\n//         const tagHolderslist = document.querySelectorAll(\".tagHolder\")\n//         if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().left &&\n//         tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().right){\n//           rA.style[\"visibility\"] = \"visible\";\n//         }\n//       }\n//     }\n//     render(){\n//     return(\n//       <div className=\"secondPageMainDiv\" id=\"secondPageMainDiv\">\n//         <img onClick={this.handleArrow} alt=\"left_arrow_icon\" src={arrow} title=\"Go back\" className=\"arrowBack\" id=\"arrowBack\" />\n//         <form className=\"secondPage__form\" onSubmit={this.handleSubmit}>\n//           <button onClick={this.handleSubmit} title=\"Search for pictures\" type=\"button\" className=\"secondPage__form__lupeBtn\" ><img className=\"lupeIcon\" alt=\"lupe_icon\" src={lupe} /></button>\n//           <input list=\"autocomplite\" autoComplete=\"off\" title=\"Search for pictures\" required onChange={this.handleChange} placeholder=\"Search...\" id=\"secondPage__form__search\" className=\"secondPage__form__search\" type=\"search\" />\n//           <datalist id=\"autocomplite\">\n//               {this.props.hints.map(elem => {\n//                 return <option key={elem} value={elem}>{elem}</option>\n//               })}\n//             </datalist>\n//           <button title=\"Clear form\" type=\"button\" onClick={this.clearInput} className=\"secondPage__form__clearBtn\"><img className=\"crossIcon\" alt=\"cross_icon\" src={cross} /></button>\n//         </form>\n//         <div className=\"alertDiv\">\n//           <p className=\"alertP\">{this.props.hints[0] === \"No hints for choosen query\" ? \" -- \" + this.props.hints[0] : null}</p>\n//         </div>\n//         <h1 className=\"secondPage__h1\">{this.state.query}</h1>\n//         {this.state.tags.length > 1 ?\n//         <div className=\"mainTagsDiv\" id=\"mainTagsDiv\">\n//           <div className=\"leftArrowHolder\" id=\"leftArrowHolder\">\n//             <div onClick={this.scrollLeft} className=\"leftArrow\"></div>\n//           </div>\n//           <div className=\"rightArrowHolder\" id=\"rightArrowHolder\">\n//             <div onClick={this.scrollRigth} className=\"rightArrow\"></div>\n//           </div>\n//           <div className=\"innerTagsDiv\" id=\"innerTagsDiv\">\n//           {this.state.tags.map(elem => {\n//                   return <div onClick={this.handleTag} id={elem} key={elem + \"LI\"} className=\"tagHolder\">\n//                       <p id={elem} key={elem} className=\"tagP\">{elem.charAt(0).toUpperCase() + elem.slice(1)}</p>\n//                         </div>\n//                       })}\n//           </div>\n//         </div> : null}\n//         <div className=\"secondPage__imagesContainer\" id=\"secondPage__imagesContainer\">\n//           {/* just for resize */}\n//           <div className=\"resizeImagesDiv\" id=\"resizeImagesDiv\">\n//             {this.state.resizeImages.length > 0 ? this.state.resizeImages.map(elem => {\n//                 return (\n//                   <div className=\"resizeImageHolder\" id={\"resizeImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"resizeImg\" alt={elem[7]} src={elem[0]} />\n//                     <div className=\"resize__onImg__innerInfoDiv\" id={\"resize__onImg__innerInfoDiv\"+elem[6]}>\n//                       <img className=\"resize__onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\n//                       <div className=\"resize__onImg__userInfoDiv\">\n//                         <p className=\"resize__onImg__nameP\">{this.state.name}</p>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )\n//               }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\n//           </div>\n//           <div className=\"leftImagesDiv\" id=\"leftImagesDiv\">\n//             {this.state.leftImages.length > 0 ? this.state.leftImages.map(elem => {\n//               return (\n//                 <div className=\"leftImageHolder\" id={\"leftImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"leftImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\n//                   <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\n//                     <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\n//                     <div className=\"onImg__userInfoDiv\">\n//                       <p className=\"onImg__nameP\">{this.state.name}</p>\n//                     </div>\n//                   </div>\n//                 </div>\n//               )\n//             }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\n//           </div>\n//           <div className=\"midImagesDiv\" id=\"midImagesDiv\">\n//             {this.state.midImages.map(elem => {\n//                 return (\n//                   <div className=\"midImageHolder\" id={\"midImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\n//                     <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"midImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\n//                     <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\n//                       <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\n//                       <div className=\"onImg__userInfoDiv\">\n//                         <p className=\"onImg__nameP\">{this.state.name}</p>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )\n//               })}\n//           </div>\n//           <div className=\"rightImagesDiv\" id=\"rightImagesDiv\">\n//             {this.state.rightImages.map(elem => {\n//                 return (\n//                 <div className=\"rightImageHolder\" id={\"rightImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"rightImg\" alt={elem[7]} title={elem[7]} src={elem[0]} />\n//                   <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\n//                     <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\n//                     <div className=\"onImg__userInfoDiv\">\n//                       <p className=\"onImg__nameP\">{this.state.name}</p>\n//                     </div>\n//                   </div>\n//                 </div>\n//                 )\n//               })}\n//           </div>\n//         </div>\n//         {this.state.images === \"empty\" && this.state.leftImages.length > 1 ? <p id=\"noMoreImgs\">No more photos to display for '{this.state.query}' query.</p> : null}\n//         {this.state.showParticularPic ? <OpenedImage id={this.state.imgId} rawImg={this.state.rawImg} openImage={this.openImage}\n//         name={this.state.name} username={this.state.username} location={this.state.location} profileImg={this.state.profileImg} \n//         picOrientation={this.state.picOrientation}/> : null}\n//       </div>\n//     )}\n//   }","map":{"version":3,"sources":["C:/Users/MateBook/Desktop/look-for-image/src/secondPage.js"],"names":["React","useEffect","useState","OpenedImage","lupe","cross","arrow","tomTomApiKey","APIAccessKey"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,MAAMC,YAAY,GAAG,kCAArB;AACA,MAAMC,YAAY,GAAG,6CAArsourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport OpenedImage from './openedImage';\r\nimport lupe from './icons/loupe.png';\r\nimport cross from \"./icons/letter-x.png\";\r\nimport arrow from './icons/arrow.png'\r\n\r\nconst tomTomApiKey = \"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\"\r\nconst APIAccessKey = \"6PMB_sssC924TiZ3jPaY4Iwo4KZ0E6d6xZ0dgSbK4_g\";\r\n\r\n// export default class SecondPage extends React.Component{\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.state = {\r\n//         showParticularPic: false,\r\n//         images: [],\r\n//         leftImages: [],\r\n//         midImages: [],\r\n//         rightImages: [],\r\n//         query: props.mainInput.charAt(0).toUpperCase() + props.mainInput.slice(1),\r\n//         picOrientation: \"\",\r\n//         imgId: \"\",\r\n//         smallImg: \"\",\r\n//         rawImg: \"\",\r\n//         name: \"\",\r\n//         username: \"\",\r\n//         location: \"\",\r\n//         profileImg: \"\",\r\n//         scrollnum: 1,\r\n//         imgsFromScroll: [],\r\n//         resizeImages: [],\r\n//         tags: []\r\n//       }\r\n//       this.handleChange = this.handleChange.bind(this);\r\n//       this.handleSubmit = this.handleSubmit.bind(this);\r\n//       this.clearInput = this.clearInput.bind(this);\r\n//       this.openImage = this.openImage.bind(this);\r\n//       this.setPicData = this.setPicData.bind(this);\r\n//       this.fetchAPI = this.fetchAPI.bind(this);\r\n//       this.scrollUpdate = this.scrollUpdate.bind(this);\r\n//       this.preparePicToOpen = this.preparePicToOpen.bind(this);\r\n//       this.showOnImageInfo = this.showOnImageInfo.bind(this);\r\n//       this.hideOnPicImageInfo = this.hideOnPicImageInfo.bind(this);\r\n//       this.handleArrow = this.handleArrow.bind(this);\r\n//       this.handleTag = this.handleTag.bind(this);\r\n//       this.scrollRigth = this.scrollRigth.bind(this);\r\n//       this.scrollLeft = this.scrollLeft.bind(this);\r\n//     }\r\n//     fetchAPI(page){\r\n  \r\n//       fetch(\"https://api.unsplash.com/search/photos/?\"\r\n//       + \"&client_id=\" + APIAccessKey\r\n//       + \"&query=\" + this.props.mainInput\r\n//       + \"&per_page=30\"\r\n//       + \"&page=\" + page\r\n//       )\r\n//       .then(response => response.json())\r\n//       .then((data, fetchedUrls) => fetchedUrls = data.results.map(elem => [elem.urls.small, elem.urls.regular, elem.user.name,\r\n//       elem.user.username, elem.user.location, elem.user.profile_image.medium, elem.id, elem.alt_description, elem.tags]))\r\n//       .then(data => this.setState({images: data.length > 0 ? data : \"empty\"}))\r\n//       .then(data => this.setState({leftImages: this.state.images === \"empty\" ? this.state.leftImages\r\n//        : this.state.leftImages.concat(this.state.images.filter((function(_, i){return i % 3 === 0})))}))\r\n//       .then(data => this.setState({midImages: this.state.images === \"empty\" ? this.state.midImages \r\n//       :this.state.midImages.concat(this.state.images.slice(2).filter((function(_, i){return i % 3 === 0})))}))\r\n//       .then(data => this.setState({rightImages: this.state.images === \"empty\" ? this.state.rightImages \r\n//       :this.state.rightImages.concat(this.state.images.slice(1).filter((function(_, i){return i % 3 === 0})))}))\r\n//       .then(data => this.setState({resizeImages: this.state.images === \"empty\" ? this.state.resizeImages \r\n//       :this.state.resizeImages.concat(this.state.images)}))\r\n//       .then(gettags => gettags = this.state.images.map(elem => elem[8].length > 1 ? elem[8][1] : null).filter(elem => elem !== null)\r\n//       .map(elem => elem.title).filter(e => e !== this.props.mainInput).filter(e => e.length <= 16))\r\n//       .then(data => this.setState({tags: [...new Set(data)]}))\r\n//       .catch(err => console.log(err))\r\n\r\n//       // to hide no hints alert and tags\r\n//       this.clearInput()\r\n//       this.setState({tags: []})\r\n//     }\r\n//     scrollUpdate(){\r\n//       if(this.state.showParticularPic === true || this.state.images === \"empty\"){\r\n//         return;\r\n//       }\r\n//       const lastDiv = document.querySelector(\".secondPage__imagesContainer\")\r\n//       if(lastDiv.getBoundingClientRect().bottom -1 < window.innerHeight){\r\n//         this.fetchAPI(this.state.scrollnum + 1);\r\n//         this.setState({\r\n//           scrollnum: this.state.scrollnum + 1\r\n//         })\r\n//       }\r\n//     }\r\n//     showOnImageInfo(event){\r\n\r\n//       this.setPicData(event)\r\n      \r\n//       const id = event.target.id\r\n//       const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n//       const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n      \r\n//       userInfoDiv.style[\"display\"] = \"flex\";\r\n//       resizeUserInfoDiv.style[\"display\"] = \"flex\";\r\n//     }\r\n//     hideOnPicImageInfo(event){\r\n      \r\n//       const id = event.target.id\r\n//       const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n//       const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n//       userInfoDiv.style[\"display\"] = \"none\";\r\n//       resizeUserInfoDiv.style[\"display\"] = \"none\";\r\n//     }\r\n//     componentDidMount(){\r\n  \r\n//       this.fetchAPI(1)\r\n  \r\n//       // scroll function\r\n//       window.addEventListener('scroll', this.scrollUpdate)\r\n\r\n//       // fetch on hints list click\r\n//       const inp = document.getElementById(\"secondPage__form__search\")\r\n//       let eventSource = null;\r\n//       let value = '';\r\n\r\n//       inp.addEventListener('keydown', (e) => {\r\n//         eventSource = e.key ? 'input' : 'list';\r\n//       });\r\n//       inp.addEventListener('input', (e) => {\r\n//         value = e.target.value;\r\n//         if (eventSource === 'list') {\r\n//           this.setState({\r\n//             images: [],\r\n//             leftImages: [],\r\n//             midImages: [],\r\n//             rightImages: [],\r\n//             resizeImages: []\r\n//           })\r\n//           this.props.setMainInput(value)\r\n//           this.setState({query: value})\r\n//           this.fetchAPI(1)\r\n//         }\r\n//       });\r\n\r\n//     }\r\n//     async handleChange(event){\r\n//       await this.props.setMainInput(event.target.value.toLowerCase())\r\n\r\n//       if(event.target.value.length > 2){\r\n//         this.props.fetchAPIHints()        \r\n//       } else {\r\n//         this.props.setHints([])\r\n//       }\r\n//     }\r\n//     handleSubmit(event){\r\n//       event.preventDefault();\r\n  \r\n//       this.setState({\r\n//         images: [],\r\n//         leftImages: [],\r\n//         midImages: [],\r\n//         rightImages: [],\r\n//         resizeImages: [],\r\n//       })\r\n//       this.fetchAPI(1)\r\n  \r\n//       this.setState({\r\n//         query: this.props.mainInput.charAt(0).toUpperCase() + this.props.mainInput.slice(1)\r\n//       })\r\n//     }\r\n//     clearInput(){ \r\n//       const inp = document.querySelector(\".secondPage__form__search\")\r\n//       if(inp.value === \"\"){\r\n//         return;\r\n//       }\r\n//       inp.value = \"\"\r\n//       this.props.setHints([])\r\n//     }\r\n//     openImage(event){\r\n//       this.setState({\r\n//         showParticularPic: !this.state.showParticularPic\r\n//       })\r\n//     }\r\n//     setPicData(event){\r\n//       const pic = []\r\n//       const id = event.target.id\r\n//       const picContainer = event.target.className\r\n//       if(picContainer === \"leftImg\"){\r\n//         this.state.leftImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//       } \r\n//       else if (picContainer === \"midImg\"){\r\n//         this.state.midImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//       }\r\n//       else if (picContainer === \"rightImg\"){\r\n//         this.state.rightImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//       }\r\n//       else if (picContainer === \"resizeImg\"){\r\n//         this.state.resizeImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//       }\r\n      \r\n//       this.setState({\r\n//         imgId: pic[0][6],\r\n//         rawImg: pic[0][1],\r\n//         name: pic[0][2],\r\n//         username: pic[0][3],\r\n//         location: pic[0][4],\r\n//         profileImg: pic[0][5]\r\n//       })\r\n//     }\r\n//     preparePicToOpen(event){\r\n  \r\n//       this.setPicData(event)\r\n  \r\n//       const picWidth = event.target.width\r\n//       const picHeight = event.target.height\r\n  \r\n//       if(picWidth >= picHeight){\r\n//         this.setState({\r\n//           picOrientation: \"horizontal\"\r\n//         }) \r\n//       }else{\r\n//         this.setState({\r\n//           picOrientation: \"vertical\"\r\n//         }) \r\n//       }\r\n  \r\n//       this.openImage()\r\n//     }\r\n//     handleArrow(){\r\n//       this.props.changePage()\r\n//     }\r\n//     async handleTag(event){\r\n      \r\n//       const tag = event.target.id\r\n//       await this.props.setMainInput(tag)\r\n//       this.setState({query: tag.charAt(0).toUpperCase() + tag.slice(1) })\r\n//       this.setState({\r\n//         images: [],\r\n//         leftImages: [],\r\n//         midImages: [],\r\n//         rightImages: [],\r\n//         resizeImages: []\r\n//       })\r\n//       this.fetchAPI(1);\r\n//     }\r\n//     scrollRigth(){\r\n//       const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n//       innerTagsDiv.scrollBy(350, 0);\r\n\r\n//       const lA = document.getElementById(\"leftArrowHolder\")\r\n//       lA.style[\"visibility\"] = \"visible\";\r\n\r\n//       const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//       const rA = document.getElementById(\"rightArrowHolder\")\r\n//       if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right < rA.getBoundingClientRect().right){\r\n//         rA.style[\"visibility\"] = \"hidden\";\r\n//       }\r\n//     }\r\n//     async scrollLeft(){\r\n//       const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n//       innerTagsDiv.scrollBy(-350, 0);\r\n\r\n//       const rA = document.getElementById(\"rightArrowHolder\")\r\n//       rA.style[\"visibility\"] = \"visible\";\r\n\r\n//       const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//       const lA = document.getElementById(\"leftArrowHolder\")\r\n//       if(tagHolderslist[0].getBoundingClientRect().left > lA.getBoundingClientRect().left){\r\n//         lA.style[\"visibility\"] = \"hidden\";\r\n//         }\r\n//     }\r\n//     componentDidUpdate(){\r\n//       if(this.state.tags.length > 1){\r\n        \r\n//         const rA = document.getElementById(\"rightArrowHolder\")\r\n//         const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//         if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().left &&\r\n//         tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().right){\r\n//           rA.style[\"visibility\"] = \"visible\";\r\n//         }\r\n//       }\r\n//     }\r\n//     render(){\r\n//     return(\r\n//       <div className=\"secondPageMainDiv\" id=\"secondPageMainDiv\">\r\n//         <img onClick={this.handleArrow} alt=\"left_arrow_icon\" src={arrow} title=\"Go back\" className=\"arrowBack\" id=\"arrowBack\" />\r\n//         <form className=\"secondPage__form\" onSubmit={this.handleSubmit}>\r\n//           <button onClick={this.handleSubmit} title=\"Search for pictures\" type=\"button\" className=\"secondPage__form__lupeBtn\" ><img className=\"lupeIcon\" alt=\"lupe_icon\" src={lupe} /></button>\r\n//           <input list=\"autocomplite\" autoComplete=\"off\" title=\"Search for pictures\" required onChange={this.handleChange} placeholder=\"Search...\" id=\"secondPage__form__search\" className=\"secondPage__form__search\" type=\"search\" />\r\n//           <datalist id=\"autocomplite\">\r\n//               {this.props.hints.map(elem => {\r\n//                 return <option key={elem} value={elem}>{elem}</option>\r\n//               })}\r\n//             </datalist>\r\n//           <button title=\"Clear form\" type=\"button\" onClick={this.clearInput} className=\"secondPage__form__clearBtn\"><img className=\"crossIcon\" alt=\"cross_icon\" src={cross} /></button>\r\n//         </form>\r\n//         <div className=\"alertDiv\">\r\n//           <p className=\"alertP\">{this.props.hints[0] === \"No hints for choosen query\" ? \" -- \" + this.props.hints[0] : null}</p>\r\n//         </div>\r\n//         <h1 className=\"secondPage__h1\">{this.state.query}</h1>\r\n\r\n//         {this.state.tags.length > 1 ?\r\n//         <div className=\"mainTagsDiv\" id=\"mainTagsDiv\">\r\n//           <div className=\"leftArrowHolder\" id=\"leftArrowHolder\">\r\n//             <div onClick={this.scrollLeft} className=\"leftArrow\"></div>\r\n//           </div>\r\n//           <div className=\"rightArrowHolder\" id=\"rightArrowHolder\">\r\n//             <div onClick={this.scrollRigth} className=\"rightArrow\"></div>\r\n//           </div>\r\n//           <div className=\"innerTagsDiv\" id=\"innerTagsDiv\">\r\n//           {this.state.tags.map(elem => {\r\n//                   return <div onClick={this.handleTag} id={elem} key={elem + \"LI\"} className=\"tagHolder\">\r\n//                       <p id={elem} key={elem} className=\"tagP\">{elem.charAt(0).toUpperCase() + elem.slice(1)}</p>\r\n//                         </div>\r\n//                       })}\r\n//           </div>\r\n//         </div> : null}\r\n       \r\n//         <div className=\"secondPage__imagesContainer\" id=\"secondPage__imagesContainer\">\r\n  \r\n//           {/* just for resize */}\r\n//           <div className=\"resizeImagesDiv\" id=\"resizeImagesDiv\">\r\n//             {this.state.resizeImages.length > 0 ? this.state.resizeImages.map(elem => {\r\n//                 return (\r\n//                   <div className=\"resizeImageHolder\" id={\"resizeImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"resizeImg\" alt={elem[7]} src={elem[0]} />\r\n//                     <div className=\"resize__onImg__innerInfoDiv\" id={\"resize__onImg__innerInfoDiv\"+elem[6]}>\r\n//                       <img className=\"resize__onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n//                       <div className=\"resize__onImg__userInfoDiv\">\r\n//                         <p className=\"resize__onImg__nameP\">{this.state.name}</p>\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 )\r\n//               }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n//           </div>\r\n//           <div className=\"leftImagesDiv\" id=\"leftImagesDiv\">\r\n  \r\n//             {this.state.leftImages.length > 0 ? this.state.leftImages.map(elem => {\r\n//               return (\r\n//                 <div className=\"leftImageHolder\" id={\"leftImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"leftImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n//                   <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                     <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n//                     <div className=\"onImg__userInfoDiv\">\r\n//                       <p className=\"onImg__nameP\">{this.state.name}</p>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )\r\n//             }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n//           </div>\r\n//           <div className=\"midImagesDiv\" id=\"midImagesDiv\">\r\n//             {this.state.midImages.map(elem => {\r\n//                 return (\r\n//                   <div className=\"midImageHolder\" id={\"midImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                     <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"midImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n//                     <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                       <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n//                       <div className=\"onImg__userInfoDiv\">\r\n//                         <p className=\"onImg__nameP\">{this.state.name}</p>\r\n//                       </div>\r\n//                     </div>\r\n//                   </div>\r\n//                 )\r\n//               })}\r\n//           </div>\r\n//           <div className=\"rightImagesDiv\" id=\"rightImagesDiv\">\r\n//             {this.state.rightImages.map(elem => {\r\n//                 return (\r\n//                 <div className=\"rightImageHolder\" id={\"rightImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                   <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"rightImg\" alt={elem[7]} title={elem[7]} src={elem[0]} />\r\n//                   <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                     <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n//                     <div className=\"onImg__userInfoDiv\">\r\n//                       <p className=\"onImg__nameP\">{this.state.name}</p>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//                 )\r\n//               })}\r\n//           </div>\r\n//         </div>\r\n//         {this.state.images === \"empty\" && this.state.leftImages.length > 1 ? <p id=\"noMoreImgs\">No more photos to display for '{this.state.query}' query.</p> : null}\r\n//         {this.state.showParticularPic ? <OpenedImage id={this.state.imgId} rawImg={this.state.rawImg} openImage={this.openImage}\r\n//         name={this.state.name} username={this.state.username} location={this.state.location} profileImg={this.state.profileImg} \r\n//         picOrientation={this.state.picOrientation}/> : null}\r\n//       </div>\r\n//     )}\r\n//   }"]},"metadata":{},"sourceType":"module"}