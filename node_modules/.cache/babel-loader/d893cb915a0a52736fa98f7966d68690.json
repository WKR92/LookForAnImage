{"ast":null,"code":"import _toConsumableArray from\"C:/Users/MateBook/Desktop/look-for-image/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/MateBook/Desktop/look-for-image/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'./App.css';import FirstPage from'./firstPage';import SecondPage from'./secondPage';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var tomTomApiKey=\"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\";function App(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),showFirstPage=_useState2[0],setShowFirstPage=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),showSecondPage=_useState4[0],setShowSecondPage=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),mainInput=_useState6[0],setMainInput=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),hints=_useState8[0],setHints=_useState8[1];function changePages(){setShowFirstPage(!showFirstPage);setShowSecondPage(!showSecondPage);}function fetchAPIHints(page){var _this=this;// Najpierw zrobiłem autouzupełnianie z API microsoftu, dawał bardziej trafione podpowiedzi, \n// ale limit 1000 req/msc nie starczył nawet na dokończenie konfiguracji\n// fetch(\"https://api.bing.microsoft.com/\"\n// + \"v7.0/Suggestions?\"\n// + \"&mkt=en-US\"\n// + \"&setLang=en-US\"\n// + \"&q=\" + this.props.mainInput, {\n//   headers: {\n//     'Ocp-Apim-Subscription-Key' : subscriptionKey,\n//   }\n// })\n// .then(response => response.json())\n// .then((data, fetchedDesriptions) => fetchedDesriptions = data.suggestionGroups[0].searchSuggestions.map(elem => elem.displayText))\n// .then((data) => this.setState({hints: data}))\n// .catch(err => console.log(err))\n// tom tom ma 2500 req/dzień, ale słabe podpowiedzi - chyba bardziej dla map\n// Myślałem także nad Google Places Autocomplite API, ale nie byłem pewien czy istnieje jakiś zakres darmowego\n// użytkowania, jaki potrzebowałbym do tego projektu.\nvar regex=new RegExp(\"\".concat(mainInput));fetch(\"https://api.tomtom.com/search/\"+\"2\"+\"/autocomplete/\"+mainInput+\".\"+\"json\"+\"?key=\"+tomTomApiKey+\"&language=en-GB\"+\"&limit=10\").then(function(res){return res.json();}).then(function(data,fetchedDesriptions){return fetchedDesriptions=data.results.map(function(elem){return elem.segments[0].value.toLowerCase();});}).then(function(data,setData){return setData=_toConsumableArray(new Set(data));}).then(function(data,filteredData){return filteredData=data.filter(function(elem){return elem.match(regex);});}).then(function(data,clearedData){return clearedData=data.filter(function(elem){return elem!==mainInput;});}).then(function(data){return _this.setHints(data.length<1?[\"No hints for choosen query\"]:data);}).catch(function(err){return _this.setHints([]);});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[showFirstPage?/*#__PURE__*/_jsx(FirstPage,{changePage:changePages,mainInput:mainInput,setMainInput:setMainInput,fetchAPIHints:fetchAPIHints,hints:hints,setHints:setHints}):null,showSecondPage?/*#__PURE__*/_jsx(SecondPage,{setMainInput:setMainInput,mainInput:mainInput,changePage:changePages,fetchAPIHints:fetchAPIHints,hints:hints,setHints:setHints}):null]});}export default App;","map":{"version":3,"sources":["C:/Users/MateBook/Desktop/look-for-image/src/App.js"],"names":["React","useState","FirstPage","SecondPage","tomTomApiKey","App","showFirstPage","setShowFirstPage","showSecondPage","setShowSecondPage","mainInput","setMainInput","hints","setHints","changePages","fetchAPIHints","page","regex","RegExp","fetch","then","res","json","data","fetchedDesriptions","results","map","elem","segments","value","toLowerCase","setData","Set","filteredData","filter","match","clearedData","length","catch","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport FirstPage from './firstPage';\nimport SecondPage from './secondPage';\n\nconst tomTomApiKey = \"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\"\n\nfunction App() {\n  const [showFirstPage, setShowFirstPage] = useState(true)\n  const [showSecondPage, setShowSecondPage] = useState(false)\n  const [mainInput, setMainInput] = useState(\"\");\n  const [hints, setHints] = useState([]);\n\n  function changePages(){\n    setShowFirstPage(!showFirstPage);\n    setShowSecondPage(!showSecondPage);\n  }\n\n  function fetchAPIHints(page){\n\n    // Najpierw zrobiłem autouzupełnianie z API microsoftu, dawał bardziej trafione podpowiedzi, \n    // ale limit 1000 req/msc nie starczył nawet na dokończenie konfiguracji\n    // fetch(\"https://api.bing.microsoft.com/\"\n    // + \"v7.0/Suggestions?\"\n    // + \"&mkt=en-US\"\n    // + \"&setLang=en-US\"\n    // + \"&q=\" + this.props.mainInput, {\n    //   headers: {\n    //     'Ocp-Apim-Subscription-Key' : subscriptionKey,\n    //   }\n    // })\n    // .then(response => response.json())\n    // .then((data, fetchedDesriptions) => fetchedDesriptions = data.suggestionGroups[0].searchSuggestions.map(elem => elem.displayText))\n    // .then((data) => this.setState({hints: data}))\n    // .catch(err => console.log(err))\n\n    // tom tom ma 2500 req/dzień, ale słabe podpowiedzi - chyba bardziej dla map\n    // Myślałem także nad Google Places Autocomplite API, ale nie byłem pewien czy istnieje jakiś zakres darmowego\n    // użytkowania, jaki potrzebowałbym do tego projektu.\n\n    const regex = new RegExp(`${mainInput}`)\n    fetch(\"https://api.tomtom.com/search/\"\n    + \"2\"\n    + \"/autocomplete/\"\n    + mainInput\n    + \".\"\n    + \"json\"\n    + \"?key=\" + tomTomApiKey\n    + \"&language=en-GB\"\n    + \"&limit=10\")\n    .then(res => res.json())\n    .then((data, fetchedDesriptions) => fetchedDesriptions = data.results.map(elem => elem.segments[0].value.toLowerCase()))\n    .then((data, setData) => setData = [...new Set(data)])\n    .then((data, filteredData) => filteredData = data.filter(elem => elem.match(regex)))\n    .then((data, clearedData) => clearedData = data.filter(elem => elem !== mainInput))\n    .then((data) => this.setHints(data.length < 1 ? [\"No hints for choosen query\"] : data))\n    .catch(err => this.setHints([]))\n  }\n\n  return (\n    <div className=\"App\">\n      {showFirstPage ? <FirstPage changePage={changePages} mainInput={mainInput} setMainInput={setMainInput}\n      fetchAPIHints={fetchAPIHints} hints={hints} setHints={setHints} /> : null}\n      {showSecondPage ? <SecondPage setMainInput={setMainInput} mainInput={mainInput} changePage={changePages} \n      fetchAPIHints={fetchAPIHints} hints={hints} setHints={setHints}/> : null}\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}