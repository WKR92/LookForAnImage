{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MateBook\\\\Desktop\\\\look-for-image\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport FirstPage from './firstPage';\nimport SecondPage from './secondPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tomTomApiKey = \"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\";\n\nfunction App() {\n  _s();\n\n  const [showFirstPage, setShowFirstPage] = useState(true);\n  const [showSecondPage, setShowSecondPage] = useState(false);\n  const [mainInput, setMainInput] = useState(\"\");\n  const [hints, setHints] = useState([]);\n\n  function changePages() {\n    setShowFirstPage(!showFirstPage);\n    setShowSecondPage(!showSecondPage);\n  }\n\n  function getHints(div) {\n    const inp = document.getElementById(\"contentDiv__form__input\");\n    let eventSource = null;\n    let value = ''; // fetch on hints list click\n\n    inp.addEventListener('keydown', e => {\n      eventSource = e.key ? 'input' : 'list';\n    });\n    inp.addEventListener('input', e => {\n      value = e.target.value;\n\n      if (eventSource === 'list') {\n        setMainInput(value);\n        changePages();\n      }\n    });\n  }\n\n  function fetchAPIHints(page) {\n    // Najpierw zrobiłem autouzupełnianie z API microsoftu, dawał bardziej trafione podpowiedzi, \n    // ale limit 1000 req/msc nie starczył nawet na dokończenie konfiguracji\n    // fetch(\"https://api.bing.microsoft.com/\"\n    // + \"v7.0/Suggestions?\"\n    // + \"&mkt=en-US\"\n    // + \"&setLang=en-US\"\n    // + \"&q=\" + this.props.mainInput, {\n    //   headers: {\n    //     'Ocp-Apim-Subscription-Key' : subscriptionKey,\n    //   }\n    // })\n    // .then(response => response.json())\n    // .then((data, fetchedDesriptions) => fetchedDesriptions = data.suggestionGroups[0].searchSuggestions.map(elem => elem.displayText))\n    // .then((data) => this.setState({hints: data}))\n    // .catch(err => console.log(err))\n    // tom tom ma 2500 req/dzień, ale słabe podpowiedzi - chyba bardziej dla map\n    // Myślałem także nad Google Places Autocomplite API, ale nie byłem pewien czy istnieje jakiś zakres darmowego\n    // użytkowania, jaki potrzebowałbym do tego projektu.\n    const regex = new RegExp(`${mainInput}`);\n    fetch(\"https://api.tomtom.com/search/\" + \"2\" + \"/autocomplete/\" + mainInput + \".\" + \"json\" + \"?key=\" + tomTomApiKey + \"&language=en-GB\" + \"&limit=10\").then(res => res.json()).then((data, fetchedDesriptions) => fetchedDesriptions = data.results.map(elem => elem.segments[0].value.toLowerCase())).then((data, setData) => setData = [...new Set(data)]).then((data, filteredData) => filteredData = data.filter(elem => elem.match(regex))) // .then((data, clearedData) => clearedData = data.filter(elem => elem !== this.props.mainInput))\n    .then(data => this.setHints(data.length < 1 ? [\"No hints for choosen query\"] : data)).catch(err => this.setHints([]));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [showFirstPage ? /*#__PURE__*/_jsxDEV(FirstPage, {\n      changePage: changePages,\n      mainInput: mainInput,\n      setMainInput: setMainInput,\n      fetchAPIHints: fetchAPIHints,\n      hints: hints,\n      setHints: setHints,\n      getHints: getHints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 24\n    }, this) : null, showSecondPage ? /*#__PURE__*/_jsxDEV(SecondPage, {\n      setMainInput: setMainInput,\n      mainInput: mainInput,\n      changePage: changePages,\n      fetchAPIHints: fetchAPIHints,\n      hints: hints,\n      setHints: setHints,\n      getHints: getHints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rVkDVAsa6Df+3a7MwjLVREG5tRM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/MateBook/Desktop/look-for-image/src/App.js"],"names":["React","useState","FirstPage","SecondPage","tomTomApiKey","App","showFirstPage","setShowFirstPage","showSecondPage","setShowSecondPage","mainInput","setMainInput","hints","setHints","changePages","getHints","div","inp","document","getElementById","eventSource","value","addEventListener","e","key","target","fetchAPIHints","page","regex","RegExp","fetch","then","res","json","data","fetchedDesriptions","results","map","elem","segments","toLowerCase","setData","Set","filteredData","filter","match","length","catch","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport FirstPage from './firstPage';\nimport SecondPage from './secondPage';\n\nconst tomTomApiKey = \"MmTYW8cbCvlP0Ldmo9cUDGwEyyqEUq0G\"\n\nfunction App() {\n  const [showFirstPage, setShowFirstPage] = useState(true)\n  const [showSecondPage, setShowSecondPage] = useState(false)\n  const [mainInput, setMainInput] = useState(\"\");\n  const [hints, setHints] = useState([]);\n\n  function changePages(){\n    setShowFirstPage(!showFirstPage);\n    setShowSecondPage(!showSecondPage);\n  }\n\n  function getHints(div){\n    const inp = document.getElementById(\"contentDiv__form__input\")\n    let eventSource = null;\n    let value = '';\n\n    // fetch on hints list click\n    inp.addEventListener('keydown', (e) => {\n      eventSource = e.key ? 'input' : 'list';\n    });\n    inp.addEventListener('input', (e) => {\n      value = e.target.value;\n      if (eventSource === 'list') {\n        setMainInput(value)\n        changePages();\n      }\n    });\n  }\n\n  function fetchAPIHints(page){\n\n    // Najpierw zrobiłem autouzupełnianie z API microsoftu, dawał bardziej trafione podpowiedzi, \n    // ale limit 1000 req/msc nie starczył nawet na dokończenie konfiguracji\n    // fetch(\"https://api.bing.microsoft.com/\"\n    // + \"v7.0/Suggestions?\"\n    // + \"&mkt=en-US\"\n    // + \"&setLang=en-US\"\n    // + \"&q=\" + this.props.mainInput, {\n    //   headers: {\n    //     'Ocp-Apim-Subscription-Key' : subscriptionKey,\n    //   }\n    // })\n    // .then(response => response.json())\n    // .then((data, fetchedDesriptions) => fetchedDesriptions = data.suggestionGroups[0].searchSuggestions.map(elem => elem.displayText))\n    // .then((data) => this.setState({hints: data}))\n    // .catch(err => console.log(err))\n\n    // tom tom ma 2500 req/dzień, ale słabe podpowiedzi - chyba bardziej dla map\n    // Myślałem także nad Google Places Autocomplite API, ale nie byłem pewien czy istnieje jakiś zakres darmowego\n    // użytkowania, jaki potrzebowałbym do tego projektu.\n\n    const regex = new RegExp(`${mainInput}`)\n    fetch(\"https://api.tomtom.com/search/\"\n    + \"2\"\n    + \"/autocomplete/\"\n    + mainInput\n    + \".\"\n    + \"json\"\n    + \"?key=\" + tomTomApiKey\n    + \"&language=en-GB\"\n    + \"&limit=10\")\n    .then(res => res.json())\n    .then((data, fetchedDesriptions) => fetchedDesriptions = data.results.map(elem => elem.segments[0].value.toLowerCase()))\n    .then((data, setData) => setData = [...new Set(data)])\n    .then((data, filteredData) => filteredData = data.filter(elem => elem.match(regex)))\n    // .then((data, clearedData) => clearedData = data.filter(elem => elem !== this.props.mainInput))\n    .then((data) => this.setHints(data.length < 1 ? [\"No hints for choosen query\"] : data))\n    .catch(err => this.setHints([]))\n  }\n\n  return (\n    <div className=\"App\">\n      {showFirstPage ? <FirstPage changePage={changePages} mainInput={mainInput} setMainInput={setMainInput}\n      fetchAPIHints={fetchAPIHints} hints={hints} setHints={setHints} getHints={getHints} /> : null}\n      {showSecondPage ? <SecondPage setMainInput={setMainInput} mainInput={mainInput} changePage={changePages} \n      fetchAPIHints={fetchAPIHints} hints={hints} setHints={setHints} getHints={getHints}/> : null}\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}