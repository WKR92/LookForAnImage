[{"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\index.js":"1","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\App.js":"2","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\reportWebVitals.js":"3","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\firstPage.js":"4","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\secondPage.js":"5","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\openedImage.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":2765,"mtime":1614941238335,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":3370,"mtime":1614946831869,"results":"11","hashOfConfig":"8"},{"size":32351,"mtime":1614958117391,"results":"12","hashOfConfig":"8"},{"size":2698,"mtime":1615550957756,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16mlf0q",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\index.js",[],["28","29"],"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\App.js",[],"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\reportWebVitals.js",[],"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\firstPage.js",[],"C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\secondPage.js",["30","31","32","33","34"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport OpenedImage from './openedImage';\r\nimport lupe from './icons/loupe.png';\r\nimport cross from \"./icons/letter-x.png\";\r\nimport arrow from './icons/arrow.png'\r\nimport useDidMount from '@rooks/use-did-mount';\r\nimport { resolvePlugin } from '@babel/core';\r\n\r\nconst APIAccessKey = \"6PMB_sssC924TiZ3jPaY4Iwo4KZ0E6d6xZ0dgSbK4_g\";\r\n\r\nexport default class SecondPage extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        showParticularPic: false,\r\n        images: [],\r\n        leftImages: [],\r\n        midImages: [],\r\n        rightImages: [],\r\n        query: props.mainInput.charAt(0).toUpperCase() + props.mainInput.slice(1),\r\n        picOrientation: \"\",\r\n        imgId: \"\",\r\n        smallImg: \"\",\r\n        rawImg: \"\",\r\n        name: \"\",\r\n        username: \"\",\r\n        location: \"\",\r\n        profileImg: \"\",\r\n        scrollnum: 1,\r\n        imgsFromScroll: [],\r\n        resizeImages: [],\r\n        tags: []\r\n      }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.clearInput = this.clearInput.bind(this);\r\n      this.openImage = this.openImage.bind(this);\r\n      this.setPicData = this.setPicData.bind(this);\r\n      this.fetchAPI = this.fetchAPI.bind(this);\r\n      this.scrollUpdate = this.scrollUpdate.bind(this);\r\n      this.preparePicToOpen = this.preparePicToOpen.bind(this);\r\n      this.showOnImageInfo = this.showOnImageInfo.bind(this);\r\n      this.hideOnPicImageInfo = this.hideOnPicImageInfo.bind(this);\r\n      this.handleArrow = this.handleArrow.bind(this);\r\n      this.handleTag = this.handleTag.bind(this);\r\n      this.scrollRigth = this.scrollRigth.bind(this);\r\n      this.scrollLeft = this.scrollLeft.bind(this);\r\n      this.clearLists = this.clearLists.bind(this);\r\n    }\r\n    clearLists(){\r\n      this.setState({\r\n        images: [],\r\n        leftImages: [],\r\n        midImages: [],\r\n        rightImages: [],\r\n        resizeImages: []\r\n      })\r\n    }\r\n    fetchAPI(page){\r\n  \r\n      fetch(\"https://api.unsplash.com/search/photos/?\"\r\n      + \"&client_id=\" + APIAccessKey\r\n      + \"&query=\" + this.props.mainInput\r\n      + \"&per_page=30\"\r\n      + \"&page=\" + page\r\n      )\r\n      .then(response => response.json())\r\n      .then((data, fetchedUrls) => fetchedUrls = data.results.map(elem => [elem.urls.small, elem.urls.regular, elem.user.name,\r\n      elem.user.username, elem.user.location, elem.user.profile_image.medium, elem.id, elem.alt_description, elem.tags]))\r\n      .then(data => this.setState({images: data.length > 0 ? data : \"empty\"}))\r\n      .then(data => this.setState({leftImages: this.state.images === \"empty\" ? this.state.leftImages\r\n       : this.state.leftImages.concat(this.state.images.filter((function(_, i){return i % 3 === 0})))}))\r\n      .then(data => this.setState({midImages: this.state.images === \"empty\" ? this.state.midImages \r\n      :this.state.midImages.concat(this.state.images.slice(2).filter((function(_, i){return i % 3 === 0})))}))\r\n      .then(data => this.setState({rightImages: this.state.images === \"empty\" ? this.state.rightImages \r\n      :this.state.rightImages.concat(this.state.images.slice(1).filter((function(_, i){return i % 3 === 0})))}))\r\n      .then(data => this.setState({resizeImages: this.state.images === \"empty\" ? this.state.resizeImages \r\n      :this.state.resizeImages.concat(this.state.images)}))\r\n      .then(gettags => gettags = this.state.images.map(elem => elem[8].length > 1 ? elem[8][1] : null).filter(elem => elem !== null)\r\n      .map(elem => elem.title).filter(e => e !== this.props.mainInput).filter(e => e.length <= 16))\r\n      .then(data => this.setState({tags: [...new Set(data)]}))\r\n      .catch(err => console.log(err))\r\n\r\n      // to hide no hints alert and tags\r\n      this.clearInput()\r\n      this.setState({tags: []})\r\n    }\r\n    scrollUpdate(){\r\n      if(this.state.showParticularPic === true || this.state.images === \"empty\"){\r\n        return;\r\n      }\r\n      const lastDiv = document.querySelector(\".secondPage__imagesContainer\")\r\n      if(lastDiv.getBoundingClientRect().bottom -1 < window.innerHeight){\r\n        this.fetchAPI(this.state.scrollnum + 1);\r\n        this.setState({\r\n          scrollnum: this.state.scrollnum + 1\r\n        })\r\n      }\r\n    }\r\n    showOnImageInfo(event){\r\n\r\n      this.setPicData(event)\r\n      \r\n      const id = event.target.id\r\n      const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n      const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n      \r\n      userInfoDiv.style[\"display\"] = \"flex\";\r\n      resizeUserInfoDiv.style[\"display\"] = \"flex\";\r\n    }\r\n    hideOnPicImageInfo(event){\r\n      \r\n      const id = event.target.id\r\n      const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n      const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n      userInfoDiv.style[\"display\"] = \"none\";\r\n      resizeUserInfoDiv.style[\"display\"] = \"none\";\r\n    }\r\n    componentDidMount(){\r\n\r\n      this.props.setHints([])\r\n  \r\n      this.fetchAPI(1)\r\n  \r\n      // scroll function\r\n      window.addEventListener('scroll', this.scrollUpdate)\r\n\r\n      // fetch on hints list click\r\n      const inp = document.getElementById(\"secondPage__form__search\")\r\n      let eventSource = null;\r\n      let value = '';\r\n\r\n      inp.addEventListener('keydown', (e) => {\r\n        eventSource = e.key ? 'input' : 'list';\r\n      });\r\n      inp.addEventListener('input', (e) => {\r\n        value = e.target.value;\r\n        if (eventSource === 'list') {\r\n          this.clearLists();\r\n          this.props.setMainInput(value)\r\n          this.setState({query: value})\r\n          this.fetchAPI(1)\r\n        }\r\n      });\r\n\r\n    }\r\n    async handleChange(event){\r\n      await this.props.setMainInput(event.target.value.toLowerCase())\r\n\r\n      if(event.target.value.length > 2){\r\n        this.props.fetchAPIHints()        \r\n      } else {\r\n        this.props.setHints([])\r\n      }\r\n    }\r\n    handleSubmit(event){\r\n      event.preventDefault();\r\n  \r\n      this.clearLists();\r\n      this.fetchAPI(1)\r\n  \r\n      this.setState({\r\n        query: this.props.mainInput.charAt(0).toUpperCase() + this.props.mainInput.slice(1)\r\n      })\r\n    }\r\n    clearInput(){ \r\n      const inp = document.querySelector(\".secondPage__form__search\")\r\n      if(inp.value === \"\"){\r\n        return;\r\n      }\r\n      inp.value = \"\"\r\n      this.props.setHints([])\r\n    }\r\n    openImage(event){\r\n      this.setState({\r\n        showParticularPic: !this.state.showParticularPic\r\n      })\r\n    }\r\n    setPicData(event){\r\n      const pic = []\r\n      const id = event.target.id\r\n      const picContainer = event.target.className\r\n      if(picContainer === \"leftImg\"){\r\n        this.state.leftImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n      } \r\n      else if (picContainer === \"midImg\"){\r\n        this.state.midImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n      }\r\n      else if (picContainer === \"rightImg\"){\r\n        this.state.rightImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n      }\r\n      else if (picContainer === \"resizeImg\"){\r\n        this.state.resizeImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n      }\r\n      \r\n      this.setState({\r\n        imgId: pic[0][6],\r\n        rawImg: pic[0][1],\r\n        name: pic[0][2],\r\n        username: pic[0][3],\r\n        location: pic[0][4],\r\n        profileImg: pic[0][5]\r\n      })\r\n    }\r\n    preparePicToOpen(event){\r\n  \r\n      this.setPicData(event)\r\n  \r\n      const picWidth = event.target.width\r\n      const picHeight = event.target.height\r\n  \r\n      if(picWidth >= picHeight){\r\n        this.setState({\r\n          picOrientation: \"horizontal\"\r\n        }) \r\n      }else{\r\n        this.setState({\r\n          picOrientation: \"vertical\"\r\n        }) \r\n      }\r\n  \r\n      this.openImage()\r\n    }\r\n    handleArrow(){\r\n      this.props.changePage()\r\n    }\r\n    async handleTag(event){\r\n      \r\n      const tag = event.target.id\r\n      await this.props.setMainInput(tag)\r\n      this.setState({query: tag.charAt(0).toUpperCase() + tag.slice(1) })\r\n      this.clearLists();\r\n      this.fetchAPI(1);\r\n    }\r\n    scrollRigth(){\r\n\r\n      const lA = document.getElementById(\"leftArrowHolder\")\r\n      lA.style[\"visibility\"] = \"visible\";\r\n\r\n      function firstToGo(callback){\r\n        const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n        innerTagsDiv.scrollBy(350, 0);\r\n      }\r\n\r\n      function secondToGO(){ setTimeout(() => {\r\n        const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n        const rA = document.getElementById(\"rightArrowHolder\")\r\n        if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right < rA.getBoundingClientRect().right){\r\n          rA.style[\"visibility\"] = \"hidden\";\r\n          }\r\n        }, 350)\r\n      }\r\n\r\n      firstToGo();\r\n      secondToGO();\r\n    }\r\n    scrollLeft(){\r\n\r\n      const rA = document.getElementById(\"rightArrowHolder\")\r\n      rA.style[\"visibility\"] = \"visible\";\r\n\r\n      function firstToGo(callback){\r\n          const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n          innerTagsDiv.scrollBy(-350, 0);\r\n      }\r\n\r\n      function secondToGO(){ setTimeout(() => {\r\n        const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n        const lA = document.getElementById(\"leftArrowHolder\")\r\n        if(tagHolderslist[0].getBoundingClientRect().left > lA.getBoundingClientRect().left){\r\n          lA.style[\"visibility\"] = \"hidden\";\r\n          }\r\n        }, 350)\r\n      }\r\n\r\n      firstToGo();\r\n      secondToGO();\r\n\r\n    }\r\n    componentDidUpdate(){\r\n      if(this.state.tags.length > 1){\r\n        \r\n        const rA = document.getElementById(\"rightArrowHolder\")\r\n        const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n        if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().left &&\r\n        tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().right){\r\n          rA.style[\"visibility\"] = \"visible\";\r\n        }\r\n      }\r\n    }\r\n    render(){\r\n    return(\r\n      <div className=\"secondPageMainDiv\" id=\"secondPageMainDiv\">\r\n        <img onClick={this.handleArrow} alt=\"left_arrow_icon\" src={arrow} title=\"Go back\" className=\"arrowBack\" id=\"arrowBack\" />\r\n        <form className=\"secondPage__form\" onSubmit={this.handleSubmit}>\r\n          <button onClick={this.handleSubmit} title=\"Search for pictures\" type=\"button\" className=\"secondPage__form__lupeBtn\" ><img className=\"lupeIcon\" alt=\"lupe_icon\" src={lupe} /></button>\r\n          <input list=\"autocomplite\" autoComplete=\"off\" title=\"Search for pictures\" required onChange={this.handleChange} placeholder=\"Search...\" id=\"secondPage__form__search\" className=\"secondPage__form__search\" type=\"search\" />\r\n          <datalist id=\"autocomplite\">\r\n              {this.props.hints.map(elem => {\r\n                return <option key={elem} value={elem}>{elem}</option>\r\n              })}\r\n            </datalist>\r\n          <button title=\"Clear form\" type=\"button\" onClick={this.clearInput} className=\"secondPage__form__clearBtn\"><img className=\"crossIcon\" alt=\"cross_icon\" src={cross} /></button>\r\n        </form>\r\n        <div className=\"alertDiv\">\r\n          <p className=\"alertP\">{this.props.hints[0] === \"No hints for choosen query\" ? \" -- \" + this.props.hints[0] : null}</p>\r\n        </div>\r\n        <h1 className=\"secondPage__h1\">{this.state.query}</h1>\r\n\r\n        {this.state.tags.length > 1 ?\r\n        <div className=\"mainTagsDiv\" id=\"mainTagsDiv\">\r\n          <div className=\"leftArrowHolder\" id=\"leftArrowHolder\">\r\n            <div onClick={this.scrollLeft} className=\"leftArrow\"></div>\r\n          </div>\r\n          <div className=\"rightArrowHolder\" id=\"rightArrowHolder\">\r\n            <div onClick={this.scrollRigth} className=\"rightArrow\"></div>\r\n          </div>\r\n          <div className=\"innerTagsDiv\" id=\"innerTagsDiv\">\r\n          {this.state.tags.map(elem => {\r\n                  return <div onClick={this.handleTag} id={elem} key={elem + \"LI\"} className=\"tagHolder\">\r\n                      <p id={elem} key={elem} className=\"tagP\">{elem.charAt(0).toUpperCase() + elem.slice(1)}</p>\r\n                        </div>\r\n                      })}\r\n          </div>\r\n        </div> : null}\r\n       \r\n        <div className=\"secondPage__imagesContainer\" id=\"secondPage__imagesContainer\">\r\n  \r\n          {/* just for resize */}\r\n          <div className=\"resizeImagesDiv\" id=\"resizeImagesDiv\">\r\n            {this.state.resizeImages.length > 0 ? this.state.resizeImages.map(elem => {\r\n                return (\r\n                  <div className=\"resizeImageHolder\" id={\"resizeImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n                  <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"resizeImg\" alt={elem[7]} src={elem[0]} />\r\n                    <div className=\"resize__onImg__innerInfoDiv\" id={\"resize__onImg__innerInfoDiv\"+elem[6]}>\r\n                      <img className=\"resize__onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n                      <div className=\"resize__onImg__userInfoDiv\">\r\n                        <p className=\"resize__onImg__nameP\">{this.state.name}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n          </div>\r\n          <div className=\"leftImagesDiv\" id=\"leftImagesDiv\">\r\n  \r\n            {this.state.leftImages.length > 0 ? this.state.leftImages.map(elem => {\r\n              return (\r\n                <div className=\"leftImageHolder\" id={\"leftImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n                  <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"leftImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n                  <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n                    <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n                    <div className=\"onImg__userInfoDiv\">\r\n                      <p className=\"onImg__nameP\">{this.state.name}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )\r\n            }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n          </div>\r\n          <div className=\"midImagesDiv\" id=\"midImagesDiv\">\r\n            {this.state.midImages.map(elem => {\r\n                return (\r\n                  <div className=\"midImageHolder\" id={\"midImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n                    <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"midImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n                    <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n                      <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n                      <div className=\"onImg__userInfoDiv\">\r\n                        <p className=\"onImg__nameP\">{this.state.name}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n          <div className=\"rightImagesDiv\" id=\"rightImagesDiv\">\r\n            {this.state.rightImages.map(elem => {\r\n                return (\r\n                <div className=\"rightImageHolder\" id={\"rightImageHolder\"+elem[6]} onClick={this.preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n                  <img onMouseEnter={this.showOnImageInfo} onMouseLeave={this.hideOnPicImageInfo} id={elem[6]} className=\"rightImg\" alt={elem[7]} title={elem[7]} src={elem[0]} />\r\n                  <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n                    <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={this.state.profileImg} />\r\n                    <div className=\"onImg__userInfoDiv\">\r\n                      <p className=\"onImg__nameP\">{this.state.name}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                )\r\n              })}\r\n          </div>\r\n        </div>\r\n        {this.state.images === \"empty\" && this.state.leftImages.length > 1 ? <p id=\"noMoreImgs\">No more photos to display for '{this.state.query}' query.</p> : null}\r\n        {this.state.showParticularPic ? <OpenedImage id={this.state.imgId} rawImg={this.state.rawImg} openImage={this.openImage}\r\n        name={this.state.name} username={this.state.username} location={this.state.location} profileImg={this.state.profileImg} \r\n        picOrientation={this.state.picOrientation}/> : null}\r\n      </div>\r\n    )}\r\n  }\r\n\r\n// export default function SecondPage(props){\r\n\r\n//   const [showParticularPic, setShowParticularPic] = useState(false)\r\n//   const [images, setImages] = useState([])\r\n//   const [leftImages, setLeftImages] = useState([])\r\n//   const [midImages, setMidImages] = useState([])\r\n//   const [rightImages, setRightImages] = useState([])\r\n//   const [query, setQuery] = useState(props.mainInput.charAt(0).toUpperCase() + props.mainInput.slice(1))\r\n//   const [picOrientation, setPicOrientation] = useState(\"\")\r\n//   const [imgId, setImgId] = useState(\"\")\r\n//   const [smallImg, setSmallImg] = useState(\"\")\r\n//   const [rawImg, setRawImg] = useState(\"\")\r\n//   const [name, setName] = useState(\"\")\r\n//   const [userName, setUserName] = useState(\"\")\r\n//   const [location, setLocation] = useState(\"\")\r\n//   const [profileImg, setProfileImg] = useState(false)\r\n//   const [scrollNum, setScrollNum] = useState(1)\r\n//   const [resizeImages, setResizeImages] = useState([])\r\n//   const [tags, setTags] = useState([])\r\n\r\n//   function clearLists(){\r\n//     setImages([])\r\n//     setLeftImages([])\r\n//     setMidImages([])\r\n//     setRightImages([])\r\n//     setResizeImages([])\r\n//   }\r\n//   const fetchAPI = useCallback((page) => {\r\n\r\n//     fetch(\"https://api.unsplash.com/search/photos/?\"\r\n//     + \"&client_id=\" + APIAccessKey\r\n//     + \"&query=\" + props.mainInput\r\n//     + \"&per_page=30\"\r\n//     + \"&page=\" + page\r\n//     )\r\n//     .then(response => response.json())\r\n//     .then((data, fetchedUrls) => fetchedUrls = data.results.map(elem => [elem.urls.small, elem.urls.regular, elem.user.name,\r\n//     elem.user.username, elem.user.location, elem.user.profile_image.medium, elem.id, elem.alt_description, elem.tags]))\r\n//     .then(data => setImages(data.length > 0 ? data : \"empty\"))\r\n//     .then(data => setLeftImages(images === \"empty\" ? leftImages\r\n//      : leftImages.concat(images.filter((function(_, i){return i % 3 === 0})))))\r\n//     .then(data => setMidImages(images === \"empty\" ? midImages \r\n//     :midImages.concat(images.slice(2).filter((function(_, i){return i % 3 === 0})))))\r\n//     .then(data => setRightImages(images === \"empty\" ? rightImages \r\n//     :rightImages.concat(images.slice(1).filter((function(_, i){return i % 3 === 0})))))\r\n//     .then(data => setResizeImages(images === \"empty\" ? resizeImages \r\n//     :resizeImages.concat(images)))\r\n//     .then(gettags => gettags = images.map(elem => elem[8].length > 1 ? elem[8][1] : null).filter(elem => elem !== null)\r\n//     .map(elem => elem.title).filter(e => e !== props.mainInput).filter(e => e.length <= 16))\r\n//     .then(data => setTags( [...new Set(data)]))\r\n//     .catch(err => console.log(err))\r\n\r\n//     // to hide no hints alert and tags\r\n//     // clearInput()\r\n//     setTags([])\r\n//   }, [images, leftImages, midImages, rightImages, resizeImages, props])\r\n//   function scrollUpdate(){\r\n//     if(showParticularPic === true || images === \"empty\"){\r\n//       return;\r\n//     }\r\n//     const lastDiv = document.querySelector(\".secondPage__imagesContainer\")\r\n//     if(lastDiv.getBoundingClientRect().bottom -1 < window.innerHeight){\r\n//       fetchAPI(scrollNum + 1);\r\n//       setScrollNum(scrollNum + 1)\r\n//     }\r\n//   }\r\n//   function showOnImageInfo(event){\r\n\r\n//     setPicData(event)\r\n    \r\n//     const id = event.target.id\r\n//     const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n//     const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n    \r\n//     userInfoDiv.style[\"display\"] = \"flex\";\r\n//     resizeUserInfoDiv.style[\"display\"] = \"flex\";\r\n//   }\r\n//   function hideOnPicImageInfo(event){\r\n    \r\n//     const id = event.target.id\r\n//     const userInfoDiv = document.getElementById(\"onImg__innerInfoDiv\"+id)\r\n//     const resizeUserInfoDiv = document.getElementById(\"resize__onImg__innerInfoDiv\"+id)\r\n//     userInfoDiv.style[\"display\"] = \"none\";\r\n//     resizeUserInfoDiv.style[\"display\"] = \"none\";\r\n//   }\r\n//   useEffect(() => {\r\n//     console.log(\"dupa\")\r\n\r\n//     props.setHints([])\r\n\r\n//     fetchAPI(1)\r\n\r\n//     // scroll function\r\n//     // window.addEventListener('scroll', scrollUpdate)\r\n\r\n//     // // fetch on hints list click\r\n//     // const inp = document.getElementById(\"secondPage__form__search\")\r\n//     // let eventSource = null;\r\n//     // let value = '';\r\n\r\n//     // inp.addEventListener('keydown', (e) => {\r\n//     //   eventSource = e.key ? 'input' : 'list';\r\n//     // });\r\n//     // inp.addEventListener('input', (e) => {\r\n//     //   value = e.target.value;\r\n//     //   if (eventSource === 'list') {\r\n//     //     clearLists();\r\n//     //     props.setMainInput(value)\r\n//     //     setQuery(value)\r\n//     //     fetchAPI(1)\r\n//     //   }\r\n//     // });\r\n\r\n//   }, [fetchAPI, props])\r\n//   async function handleChange(event){\r\n//     await props.setMainInput(event.target.value.toLowerCase())\r\n\r\n//     if(event.target.value.length > 2){\r\n//       props.fetchAPIHints()        \r\n//     } else {\r\n//       props.setHints([])\r\n//     }\r\n//   }\r\n//   function handleSubmit(event){\r\n//     event.preventDefault();\r\n\r\n//     clearLists();\r\n//     fetchAPI(1)\r\n\r\n//     setQuery(props.mainInput.charAt(0).toUpperCase() + props.mainInput.slice(1))\r\n//   }\r\n//   function clearInput(){ \r\n//     const inp = document.querySelector(\".secondPage__form__search\")\r\n//     if(inp.value === \"\"){\r\n//       return;\r\n//     }\r\n//     inp.value = \"\"\r\n//     props.setHints([])\r\n//   }\r\n//   function openImage(event){\r\n//     setShowParticularPic(!showParticularPic)\r\n//   }\r\n//   function setPicData(event){\r\n//     const pic = []\r\n//     const id = event.target.id\r\n//     const picContainer = event.target.className\r\n//     if(picContainer === \"leftImg\"){\r\n//       leftImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//     } \r\n//     else if (picContainer === \"midImg\"){\r\n//       midImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//     }\r\n//     else if (picContainer === \"rightImg\"){\r\n//       rightImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//     }\r\n//     else if (picContainer === \"resizeImg\"){\r\n//       resizeImages.map(elem => elem.includes(id) ? pic.push(elem) : null)\r\n//     }\r\n    \r\n//     setImgId(pic[0][6])\r\n//     setRawImg(pic[0][1])\r\n//     setName(pic[0][2])\r\n//     setUserName(pic[0][3])\r\n//     setLocation(pic[0][4])\r\n//     setProfileImg(pic[0][5])\r\n//   }\r\n//   function preparePicToOpen(event){\r\n\r\n//     setPicData(event)\r\n\r\n//     const picWidth = event.target.width\r\n//     const picHeight = event.target.height\r\n\r\n//     if(picWidth >= picHeight){\r\n//       setPicOrientation(\"horizontal\") \r\n//     }else{\r\n//       setPicOrientation(\"vertical\") \r\n//     }\r\n\r\n//     openImage()\r\n//   }\r\n//   function handleArrow(){\r\n//     props.changePage()\r\n//   }\r\n//   async function handleTag(event){\r\n    \r\n//     const tag = event.target.id\r\n//     await props.setMainInput(tag)\r\n//     setQuery(tag.charAt(0).toUpperCase() + tag.slice(1))\r\n//     clearLists();\r\n//     fetchAPI(1);\r\n//   }\r\n//   function scrollRigth(){\r\n//     const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n//     innerTagsDiv.scrollBy(350, 0);\r\n\r\n//     const lA = document.getElementById(\"leftArrowHolder\")\r\n//     lA.style[\"visibility\"] = \"visible\";\r\n\r\n//     const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//     const rA = document.getElementById(\"rightArrowHolder\")\r\n//     if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right < rA.getBoundingClientRect().right){\r\n//       rA.style[\"visibility\"] = \"hidden\";\r\n//     }\r\n//   }\r\n//   function scrollLeft(){\r\n//     const innerTagsDiv = document.getElementById(\"innerTagsDiv\")\r\n//     innerTagsDiv.scrollBy(-350, 0);\r\n\r\n//     const rA = document.getElementById(\"rightArrowHolder\")\r\n//     rA.style[\"visibility\"] = \"visible\";\r\n\r\n//     const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//     const lA = document.getElementById(\"leftArrowHolder\")\r\n//     if(tagHolderslist[0].getBoundingClientRect().left > lA.getBoundingClientRect().left){\r\n//       lA.style[\"visibility\"] = \"hidden\";\r\n//       }\r\n//   }\r\n//   useEffect(() => {\r\n//     if(tags.length > 1){\r\n      \r\n//       const rA = document.getElementById(\"rightArrowHolder\")\r\n//       const tagHolderslist = document.querySelectorAll(\".tagHolder\")\r\n//       if(tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().left &&\r\n//       tagHolderslist[tagHolderslist.length -1].getBoundingClientRect().right > rA.getBoundingClientRect().right){\r\n//         rA.style[\"visibility\"] = \"visible\";\r\n//       }\r\n//     }\r\n//   })\r\n//   return(\r\n//     <div className=\"secondPageMainDiv\" id=\"secondPageMainDiv\">\r\n//       <img onClick={handleArrow} alt=\"left_arrow_icon\" src={arrow} title=\"Go back\" className=\"arrowBack\" id=\"arrowBack\" />\r\n//       <form className=\"secondPage__form\" onSubmit={handleSubmit}>\r\n//         <button onClick={handleSubmit} title=\"Search for pictures\" type=\"button\" className=\"secondPage__form__lupeBtn\" ><img className=\"lupeIcon\" alt=\"lupe_icon\" src={lupe} /></button>\r\n//         <input list=\"autocomplite\" autoComplete=\"off\" title=\"Search for pictures\" required onChange={handleChange} placeholder=\"Search...\" id=\"secondPage__form__search\" className=\"secondPage__form__search\" type=\"search\" />\r\n//         <datalist id=\"autocomplite\">\r\n//             {props.hints.map(elem => {\r\n//               return <option key={elem} value={elem}>{elem}</option>\r\n//             })}\r\n//           </datalist>\r\n//         <button title=\"Clear form\" type=\"button\" onClick={clearInput} className=\"secondPage__form__clearBtn\"><img className=\"crossIcon\" alt=\"cross_icon\" src={cross} /></button>\r\n//       </form>\r\n//       <div className=\"alertDiv\">\r\n//         <p className=\"alertP\">{props.hints[0] === \"No hints for choosen query\" ? \" -- \" + props.hints[0] : null}</p>\r\n//       </div>\r\n//       <h1 className=\"secondPage__h1\">{query}</h1>\r\n\r\n//       {tags.length > 1 ?\r\n//       <div className=\"mainTagsDiv\" id=\"mainTagsDiv\">\r\n//         <div className=\"leftArrowHolder\" id=\"leftArrowHolder\">\r\n//           <div onClick={scrollLeft} className=\"leftArrow\"></div>\r\n//         </div>\r\n//         <div className=\"rightArrowHolder\" id=\"rightArrowHolder\">\r\n//           <div onClick={scrollRigth} className=\"rightArrow\"></div>\r\n//         </div>\r\n//         <div className=\"innerTagsDiv\" id=\"innerTagsDiv\">\r\n//         {tags.map(elem => {\r\n//                 return <div onClick={handleTag} id={elem} key={elem + \"LI\"} className=\"tagHolder\">\r\n//                     <p id={elem} key={elem} className=\"tagP\">{elem.charAt(0).toUpperCase() + elem.slice(1)}</p>\r\n//                       </div>\r\n//                     })}\r\n//         </div>\r\n//       </div> : null}\r\n     \r\n//       <div className=\"secondPage__imagesContainer\" id=\"secondPage__imagesContainer\">\r\n\r\n//         {/* just for resize */}\r\n//         <div className=\"resizeImagesDiv\" id=\"resizeImagesDiv\">\r\n//           {resizeImages.length > 0 ? resizeImages.map(elem => {\r\n//               return (\r\n//                 <div className=\"resizeImageHolder\" id={\"resizeImageHolder\"+elem[6]} onClick={preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                 <img onMouseEnter={showOnImageInfo} onMouseLeave={hideOnPicImageInfo} id={elem[6]} className=\"resizeImg\" alt={elem[7]} src={elem[0]} />\r\n//                   <div className=\"resize__onImg__innerInfoDiv\" id={\"resize__onImg__innerInfoDiv\"+elem[6]}>\r\n//                     <img className=\"resize__onImg__profile_photo\" alt=\"profile_photo\" src={profileImg} />\r\n//                     <div className=\"resize__onImg__userInfoDiv\">\r\n//                       <p className=\"resize__onImg__nameP\">{name}</p>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )\r\n//             }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n//         </div>\r\n//         <div className=\"leftImagesDiv\" id=\"leftImagesDiv\">\r\n\r\n//           {leftImages.length > 0 ? leftImages.map(elem => {\r\n//             return (\r\n//               <div className=\"leftImageHolder\" id={\"leftImageHolder\"+elem[6]} onClick={preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                 <img onMouseEnter={showOnImageInfo} onMouseLeave={hideOnPicImageInfo} id={elem[6]} className=\"leftImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n//                 <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                   <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={profileImg} />\r\n//                   <div className=\"onImg__userInfoDiv\">\r\n//                     <p className=\"onImg__nameP\">{name}</p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             )\r\n//           }) : <h2 style={{color: \"red\"}}>No results for given queries. Try with another ones.</h2> }\r\n//         </div>\r\n//         <div className=\"midImagesDiv\" id=\"midImagesDiv\">\r\n//           {midImages.map(elem => {\r\n//               return (\r\n//                 <div className=\"midImageHolder\" id={\"midImageHolder\"+elem[6]} onClick={preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                   <img onMouseEnter={showOnImageInfo} onMouseLeave={hideOnPicImageInfo} id={elem[6]} className=\"midImg\" alt={elem[7]} src={elem[0]} title={elem[7]} />\r\n//                   <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                     <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={profileImg} />\r\n//                     <div className=\"onImg__userInfoDiv\">\r\n//                       <p className=\"onImg__nameP\">{name}</p>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               )\r\n//             })}\r\n//         </div>\r\n//         <div className=\"rightImagesDiv\" id=\"rightImagesDiv\">\r\n//           {rightImages.map(elem => {\r\n//               return (\r\n//               <div className=\"rightImageHolder\" id={\"rightImageHolder\"+elem[6]} onClick={preparePicToOpen} key={elem[6]} imgid={elem[6]}>\r\n//                 <img onMouseEnter={showOnImageInfo} onMouseLeave={hideOnPicImageInfo} id={elem[6]} className=\"rightImg\" alt={elem[7]} title={elem[7]} src={elem[0]} />\r\n//                 <div className=\"onImg__innerInfoDiv\" id={\"onImg__innerInfoDiv\"+elem[6]}>\r\n//                   <img className=\"onImg__profile_photo\" alt=\"profile_photo\" src={profileImg} />\r\n//                   <div className=\"onImg__userInfoDiv\">\r\n//                     <p className=\"onImg__nameP\">{name}</p>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//               )\r\n//             })}\r\n//         </div>\r\n//       </div>\r\n//       {images === \"empty\" && leftImages.length > 1 ? <p id=\"noMoreImgs\">No more photos to display for '{query}' query.</p> : null}\r\n//       {showParticularPic ? <OpenedImage id={imgId} rawImg={rawImg} openImage={openImage}\r\n//       name={name} username={userName} location={location} profileImg={profileImg} \r\n//       picOrientation={picOrientation}/> : null}\r\n//     </div>\r\n//   )\r\n// }","C:\\Users\\MateBook\\Desktop\\look-for-image\\src\\openedImage.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":28},{"ruleId":"39","severity":1,"message":"43","line":1,"column":30,"nodeType":"41","messageId":"42","endLine":1,"endColumn":39},{"ruleId":"39","severity":1,"message":"44","line":1,"column":41,"nodeType":"41","messageId":"42","endLine":1,"endColumn":49},{"ruleId":"39","severity":1,"message":"45","line":6,"column":8,"nodeType":"41","messageId":"42","endLine":6,"endColumn":19},{"ruleId":"39","severity":1,"message":"46","line":7,"column":10,"nodeType":"41","messageId":"42","endLine":7,"endColumn":23},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useDidMount' is defined but never used.","'resolvePlugin' is defined but never used.","no-global-assign","no-unsafe-negation"]